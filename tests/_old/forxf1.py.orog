#!/usr/bin/env python
# ---------------------------------------------------------
# forxf.py
# Fssc-ForX Free Version Scanner
# Finnean-SSC
# www.finnean.com
# ---------------------------------------------------------
import os
os.environ['MPLCONFIGDIR'] = '/tmp'
import re
import smtplib
import subprocess
import sys
import time

from com.finnean.database.connection import MySQLConnection
from com.finnean.database.cursor import MySQLDictionaryCursor
from com.finnean.database.query  import MySQLQuery
from com.finnean.object.map import DictionaryToAttributeMapper
from com.finnean.web.site import Queue
import Vulnerability

from Cheetah.Template import Template

import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plot

start = int(time.time())

queue = Queue.Queue()

# ---------------------------------------------------------

def setLevel(num):
    CRITICAL = 10
    HIGH_CEIL = 9.9
    HIGH_FLOOR = 7.0
    MEDIUM_CEIL = 6.9
    MEDIUM_FLOOR = 4.0
    LOW_CEIL = 3.9
    LOW_FLOOR = 0.0

    num = int(num)

    if num == CRITICAL:
        return "Critical"
    elif num <= HIGH_CEIL and num >= HIGH_FLOOR:
        return "High"
    elif num <=MEDIUM_CEIL and num >= MEDIUM_FLOOR:
        return "Medium"
    elif num <= LOW_CEIL and num >= LOW_FLOOR:
        return "Low"
    else:
        return "N/A"

# ---------------------------------------------------------

# DB Connections
fconn = MySQLConnection.MySQLConnection()
fdb = fconn.connect( {
    'host' : 'localhost',
    'user' : 'forxf',
    'passwd' : 'ADie80forxf',
    'db' : 'forx_free'
} )
if not fdb: raise ValueError, 'FORXF-COULD NOT CONNECT TO DATABASE'

fcur = MySQLDictionaryCursor.MySQLDictionaryCursor(fdb).get()
fquery = MySQLQuery.MySQLQuery()
fquery.setCursor(fcur)
fquery.setExceptionHandler(fdb.Error)
fquery.setQuoteHandler(fdb.escape)


# ---------------------------------------------------------

oconn = MySQLConnection.MySQLConnection()
odb = oconn.connect( {
    'host' : 'localhost',
    'user' : 'osvdb',
    'passwd' : 'ADie80osvdb',
    'db' : 'osvdb'
} )
if not odb: raise ValueError, 'OSVDB-COULD NOT CONNECT TO DATABASE'

ocur = MySQLDictionaryCursor.MySQLDictionaryCursor(odb).get()
oquery = MySQLQuery.MySQLQuery()
oquery.setCursor(ocur)
oquery.setExceptionHandler(odb.Error)
oquery.setQuoteHandler(odb.escape)


# ---------------------------------------------------------

# get the next user in the queue
user = fquery.select(query="""SELECT * FROM queue WHERE completed='N' ORDER BY id""")
if not user: sys.exit(0)

queue = Queue.Queue()
mapper = DictionaryToAttributeMapper.DictionaryToAttributeMapper()
mapper.map(user[0], queue)

# ---------------------------------------------------------

# is the scanner already running? If yes, then quit and wait

running = fquery.select(query="""SELECT running FROM status WHERE id=1""")
if running[0]['running'] == 'Y':
    sys.exit(0)
else:
    fquery.select(query="""UPDATE status SET running='Y' WHERE id=1""")

# ---------------------------------------------------------

CONFIG_FILE='/usr/local/nikto/nikto.conf'
NIKTO = '/usr/local/nikto/nikto.pl'
PERL = '/usr/bin/perl'
SSL = '-ssl -p 443'
HOST = queue.hostname
PLUGINS = 'robots outdated auth embedded apache_expect_xss subdomain msgs tests content_search httpoptions headers dictionary'

# ---------------------------------------------------------

osvdb_pattern = re.compile('OSVDB-(\d+)')
url_pattern = re.compile('^\+\s(/\w+)\s-')
p = re.compile('^\+\s+(\/.*)\s+-\s+200\/OK\s+Response could be (.*)$')

cwd = os.getcwd()
os.chdir('/usr/local/nikto')

process_args = ['perl', 'nikto.pl', '-T', 'x1', '-D', '3', '-C', 'all', '-e', '1', '-h', HOST]
process = subprocess.Popen(process_args, shell=False, stdout=subprocess.PIPE)
o, e = process.communicate()


# save the output to the queue object
queue.output = o


lines = o.split('\n')
vulnerabilities = []
urls = {}
for line in lines:
    osvdb_match = re.search(osvdb_pattern, line)
    if osvdb_match:
        num = osvdb_match.groups()[0]
        vulnerabilities.append(int(num))

        sp = line.split(':')
        if sp[1].startswith(' /'):
            urls[num] = sp[1]

# ---------------------------------------------------------
if len(vulnerabilities) == 0:
    print 'No Results for User/Email: %s/%s' % (queue.hostname, queue.email)
    sys.exit(0)


sql = None
if len(vulnerabilities) == 1:
    sql = """SELECT vulnerabilities.osvdb_id AS osvdb_id,
    vulnerabilities.description AS description,
    vulnerabilities.solution AS solution,
    cvss_metrics.score AS score 
    FROM vulnerabilities 
    INNER JOIN cvss_metrics ON
    vulnerabilities.id=cvss_metrics.vulnerability_id 
    WHERE vulnerabilities.osvdb_id = %s ORDER BY cvss_metrics.score DESC""" % vulnerabilities[0]
else:
    sql = """SELECT vulnerabilities.osvdb_id AS osvdb_id,
    vulnerabilities.description AS description,
    vulnerabilities.solution AS solution,
    cvss_metrics.score AS score 
    FROM vulnerabilities 
    INNER JOIN cvss_metrics ON
    vulnerabilities.id=cvss_metrics.vulnerability_id 
    WHERE vulnerabilities.osvdb_id IN %s ORDER BY cvss_metrics.score DESC""" % repr(tuple(vulnerabilities))


vulnerability_objects = []
results = oquery.select(query=sql)
if not results:
    print 'No Results for User/Email: %s/%s' % (queue.hostname, queue.email)
    sys.exit(0)

for result in results:
    vulnerability = Vulnerability.Vulnerability()
    mapper.map(result, vulnerability)
    vulnerability.level = setLevel(vulnerability.score)
    vulnerability.url = urls.get(str(vulnerability.osvdb_id), 'N/A')
    vulnerability_objects.append(vulnerability)

# ---------------------------------------------------------

TOTAL = C = H = M = L = 0
for v in vulnerability_objects:
    if 'Critical' in v.level:
        C += 1
    elif 'High' in v.level:
        H += 1
    elif 'Medium' in v.level:
        M += 1
    elif 'Low' in v.level:
        L += 1
    TOTAL += 1


# ---------------------------------------------------------
end = int(time.time())
run = end - start

# pie chart
plot.figure(figsize = (3, 3))

data = []
labels = []
explode = []
colors = []

v = (C, H, M, L)
l = ('Critical', 'High', 'Medium', 'Low')
c = ('#ff00ff', '#ff0000', '#00ff00', '#ffff00')

for i in range(0, len(v)):
    if v[i] > 0:
        data.append(v[i])
        labels.append(l[i])
        explode.append(0.05)
        colors.append(c[i])

plot.pie(data, colors = colors, explode = explode, labels = labels, autopct = None);
plot.title('Vulnerabilities', bbox = {'facecolor': '0.9', 'pad': 15})


filename = '/var/www/sdocs/test.finnean.com/forxf/scans/%s.png' % (queue.scan_id)
plot.savefig(filename)

# ---------------------------------------------------------
server = None
servers = [
    'Apache',
    'IIS',
    'Tomcat',
    'Nginx',
    'Lighthttpd',
    'Jiqsaw',
    'Klone',
    'Abyss',
    'Oracle',
    'X5',
    'Zeus'
]


urls = []
desc = []

lines = o.split('\n')
for line in lines:
    # set the server
    if 'Server:' in line:
        for s in servers:
            if s.upper() in line.upper():
                server = s

    match = re.search(p, line)
    if match:
        if server.upper() in line.upper():
            u, d = match.groups()
            urls.append(u)
            desc.append(d)


# ---------------------------------------------------------

html = Template(file='/var/www/sdocs/test.finnean.com/forxf/scans/forxf.html')

if len(vulnerability_objects) > 0:
    html.vulnerabilities = vulnerability_objects
    html.no_results = False
else:
    html.vulnerabilities = []
    html.no_results = True


html.no_info = True
if len(urls) > 0 and len(desc) > 0:
    html.no_info = False
    html.urls = urls
    html.desc = desc

html.host = HOST[:-1]
html.scan_id = queue.scan_id

page_name = '%s.html' % queue.scan_id
fd = open('/var/www/sdocs/test.finnean.com/forxf/scans/' + page_name, 'w')
fd.write(html.respond())
print page_name

# ---------------------------------------------------------

fquery.select(query="""UPDATE status SET running='N' WHERE id=1""")
fquery.select(
    query="""UPDATE queue SET completed='Y' WHERE scan_id=%s""",
    arg_list = [queue.scan_id]
)

# ---------------------------------------------------------

# send confirmation email
smtp = smtplib.SMTP('mail.finnean.com')
sender = 'info@finnean.com'
recipient = queue.email
subject = 'Fssc-Forx Online Edition Scan Complete'

headers = "MIME-Version: 1.0\r\nContent-type: text/html;charset=utf-8\r\nFrom: %s\r\nTo:%s\r\nSubject: %s\r\n\r\n" % (
    sender, recipient, subject
)

URL = 'https://test.finnean.com/forxf/scans/%s' % page_name
html = """
<html>
<body>
Your Fssc-ForX Online Edition Free Scan is Complete.<br>
Click <a href='%s'>Here</a> to view the results<br>
</body>
</html>""" % URL
msg = headers + html
smtp.sendmail(sender, recipient, msg)

# ---------------------------------------------------------

smtp.close()
fcur.close()
fdb.close()
ocur.close()
odb.close()
os.chdir(cwd)

# ---------------------------------------------------------
